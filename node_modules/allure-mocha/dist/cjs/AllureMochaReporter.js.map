{"version":3,"file":"AllureMochaReporter.js","names":["Mocha","_interopRequireWildcard","require","_allureJsCommons","_sdk","_reporter","_runtime","_MochaTestRuntime","_legacyUtils","_utils","_excluded","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_objectWithoutProperties","o","_objectWithoutPropertiesLoose","getOwnPropertySymbols","length","indexOf","propertyIsEnumerable","ownKeys","keys","filter","enumerable","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","_toPropertyKey","value","configurable","writable","_toPrimitive","Symbol","toPrimitive","TypeError","String","Number","EVENT_SUITE_BEGIN","EVENT_SUITE_END","EVENT_TEST_BEGIN","EVENT_TEST_END","EVENT_TEST_PASS","EVENT_TEST_FAIL","EVENT_TEST_PENDING","EVENT_HOOK_BEGIN","EVENT_HOOK_END","Runner","constants","AllureMochaReporter","reporters","Base","constructor","runner","opts","_this","isInWorker","undefined","this","_this$currentHook","root","currentHook","currentTest","_len","message","Array","_key","runtime","applyRuntimeMessages","categories","writeCategoriesDefinitions","environmentInfo","writeEnvironmentInfo","name","content","options","_this$currentHook2","_opts$encoding","contentType","encoding","buffer","Buffer","from","writeAttachment","wrapInStep","on","onSuite","onSuiteEnd","onTest","onPassed","onFailed","onPending","onTestEnd","onHookStart","onHookEnd","suite","parent","testplan","applyTestPlan","idIndex","fullNameIndex","scopeUuid","startScope","scopesStack","writeTestScopes","pop","writeScope","test","globalLabels","getEnvironmentLabels","label","initialLabels","getInitialLabels","metaLabels","getAllureMetaLabels","labels","concat","file","testPath","getRelativePath","packageLabelFromPath","getPackageLabelFromPath","setTestScope","startTest","getAllureDisplayName","stage","Stage","RUNNING","fullName","getAllureFullName","testCaseId","getTestCaseId","updateTest","status","Status","PASSED","_","error","getStatusFromError","statusDetails","trace","stack","isIncludedInTestRun","SKIPPED","defaultSuites","getSuitesOfMochaTest","ensureSuiteLabels","FINISHED","stopTest","writeTest","hook","_hook$ctx","_ref","_hook$originalTitle","hookCategory","hookScope","getHookType","ctx","getTestScope","getCurrentSuiteScope","originalTitle","title","startFixture","updateFixture","stopFixture","tests","testScopeUuid","_ref2","reporterOptions","resultsDir","writer","restOptions","ReporterRuntime","FileSystemWriter","createTestPlanIndices","testRuntime","MochaTestRuntime","setGlobalTestRuntime","setLegacyApiRuntime","parallel","_opts$require","resolveParallelModeSetupFile","applyListeners","done","failures","fn","exports"],"sources":["../../src/AllureMochaReporter.ts"],"sourcesContent":["import * as Mocha from \"mocha\";\nimport type { AttachmentOptions, ContentType, Label } from \"allure-js-commons\";\nimport { Stage, Status } from \"allure-js-commons\";\nimport type { Category, RuntimeMessage } from \"allure-js-commons/sdk\";\nimport { getStatusFromError } from \"allure-js-commons/sdk\";\nimport type { Config } from \"allure-js-commons/sdk/reporter\";\nimport {\n  FileSystemWriter,\n  ReporterRuntime,\n  ensureSuiteLabels,\n  getEnvironmentLabels,\n  getPackageLabelFromPath,\n  getRelativePath,\n} from \"allure-js-commons/sdk/reporter\";\nimport { setGlobalTestRuntime } from \"allure-js-commons/sdk/runtime\";\nimport { MochaTestRuntime } from \"./MochaTestRuntime.js\";\nimport { setLegacyApiRuntime } from \"./legacyUtils.js\";\nimport type { TestPlanIndices } from \"./types.js\";\nimport {\n  applyTestPlan,\n  createTestPlanIndices,\n  getAllureDisplayName,\n  getAllureFullName,\n  getAllureMetaLabels,\n  getHookType,\n  getInitialLabels,\n  getSuitesOfMochaTest,\n  getTestCaseId,\n  getTestScope,\n  isIncludedInTestRun,\n  resolveParallelModeSetupFile,\n  setTestScope,\n} from \"./utils.js\";\n\nconst {\n  EVENT_SUITE_BEGIN,\n  EVENT_SUITE_END,\n  EVENT_TEST_BEGIN,\n  EVENT_TEST_END,\n  EVENT_TEST_PASS,\n  EVENT_TEST_FAIL,\n  EVENT_TEST_PENDING,\n  EVENT_HOOK_BEGIN,\n  EVENT_HOOK_END,\n} = Mocha.Runner.constants;\n\nexport class AllureMochaReporter extends Mocha.reporters.Base {\n  private readonly runtime: ReporterRuntime;\n  private readonly testplan?: TestPlanIndices;\n  private scopesStack: string[] = [];\n  private currentTest?: string;\n  private currentHook?: string;\n  private readonly isInWorker: boolean;\n\n  constructor(runner: Mocha.Runner, opts: Mocha.MochaOptions, isInWorker: boolean = false) {\n    super(runner, opts);\n\n    const { resultsDir = \"allure-results\", writer, ...restOptions }: Config = opts.reporterOptions || {};\n\n    this.isInWorker = isInWorker;\n    this.runtime = new ReporterRuntime({\n      writer: writer || new FileSystemWriter({ resultsDir }),\n      ...restOptions,\n    });\n    this.testplan = createTestPlanIndices();\n\n    const testRuntime = new MochaTestRuntime(this.applyRuntimeMessages);\n\n    setGlobalTestRuntime(testRuntime);\n    setLegacyApiRuntime(this);\n\n    if (opts.parallel) {\n      opts.require = [...(opts.require ?? []), resolveParallelModeSetupFile()];\n    } else {\n      this.applyListeners();\n    }\n  }\n\n  applyRuntimeMessages = (...message: RuntimeMessage[]) => {\n    const root = this.currentHook ?? this.currentTest;\n    if (root) {\n      this.runtime.applyRuntimeMessages(root, message);\n    }\n  };\n\n  /**\n   * @deprecated for removal. Use reporter config option instead.\n   */\n  writeCategoriesDefinitions = (categories: Category[]) => {\n    this.runtime.categories = categories;\n    if (this.isInWorker) {\n      // done is not called in a worker; emit the file immediately\n      this.runtime.writeCategoriesDefinitions();\n    }\n  };\n\n  /**\n   * @deprecated for removal. Use reporter config option instead.\n   */\n  writeEnvironmentInfo = (environmentInfo: Record<string, string>) => {\n    this.runtime.environmentInfo = environmentInfo;\n    if (this.isInWorker) {\n      // done is not called in a worker; emit the file immediately\n      this.runtime.writeEnvironmentInfo();\n    }\n  };\n\n  /**\n   * @deprecated for removal. Use reporter config option instead.\n   */\n  testAttachment = (name: string, content: Buffer | string, options: ContentType | string | AttachmentOptions) => {\n    const root = this.currentHook ?? this.currentTest;\n    if (!root) {\n      return;\n    }\n    const opts = typeof options === \"string\" ? { contentType: options } : options;\n    const encoding = opts.encoding ?? \"utf8\";\n    const buffer = typeof content === \"string\" ? Buffer.from(content, encoding) : content;\n    this.runtime.writeAttachment(root, null, name, buffer, { ...opts, wrapInStep: false });\n  };\n\n  override done(failures: number, fn?: ((failures: number) => void) | undefined): void {\n    this.runtime.writeEnvironmentInfo();\n    this.runtime.writeCategoriesDefinitions();\n    return fn?.(failures);\n  }\n\n  private applyListeners = () => {\n    this.runner\n      .on(EVENT_SUITE_BEGIN, this.onSuite)\n      .on(EVENT_SUITE_END, this.onSuiteEnd)\n      .on(EVENT_TEST_BEGIN, this.onTest)\n      .on(EVENT_TEST_PASS, this.onPassed)\n      .on(EVENT_TEST_FAIL, this.onFailed)\n      .on(EVENT_TEST_PENDING, this.onPending)\n      .on(EVENT_TEST_END, this.onTestEnd)\n      .on(EVENT_HOOK_BEGIN, this.onHookStart)\n      .on(EVENT_HOOK_END, this.onHookEnd);\n  };\n\n  private onSuite = (suite: Mocha.Suite) => {\n    if (!suite.parent && this.testplan) {\n      applyTestPlan(this.testplan.idIndex, this.testplan.fullNameIndex, suite);\n    }\n    const scopeUuid = this.runtime.startScope();\n    this.scopesStack.push(scopeUuid);\n  };\n\n  private onSuiteEnd = (suite: Mocha.Suite) => {\n    this.writeTestScopes(suite);\n    const scopeUuid = this.scopesStack.pop();\n    if (scopeUuid) {\n      this.runtime.writeScope(scopeUuid);\n    }\n  };\n\n  private onTest = (test: Mocha.Test) => {\n    const globalLabels = getEnvironmentLabels().filter((label) => !!label.value);\n    const initialLabels: Label[] = getInitialLabels();\n    const metaLabels = getAllureMetaLabels(test);\n    const labels = globalLabels.concat(initialLabels, metaLabels);\n\n    if (test.file) {\n      const testPath = getRelativePath(test.file);\n      const packageLabelFromPath: Label = getPackageLabelFromPath(testPath);\n      labels.push(packageLabelFromPath);\n    }\n\n    const scopeUuid = this.runtime.startScope();\n    setTestScope(test, scopeUuid);\n\n    this.currentTest = this.runtime.startTest(\n      {\n        name: getAllureDisplayName(test),\n        stage: Stage.RUNNING,\n        fullName: getAllureFullName(test),\n        labels,\n        testCaseId: getTestCaseId(test),\n      },\n      [...this.scopesStack, scopeUuid],\n    );\n  };\n\n  private onPassed = () => {\n    if (!this.currentTest) {\n      return;\n    }\n    this.runtime.updateTest(this.currentTest, (r) => {\n      r.status = Status.PASSED;\n    });\n  };\n\n  private onFailed = (_: Mocha.Test, error: Error) => {\n    if (!this.currentTest) {\n      return;\n    }\n    this.runtime.updateTest(this.currentTest, (r) => {\n      r.status = getStatusFromError(error);\n      r.statusDetails = {\n        message: error.message,\n        trace: error.stack,\n      };\n    });\n  };\n\n  private onPending = (test: Mocha.Test) => {\n    if (isIncludedInTestRun(test)) {\n      if (!this.currentTest) {\n        this.onTest(test);\n      }\n      this.runtime.updateTest(this.currentTest!, (r) => {\n        r.status = Status.SKIPPED;\n        r.statusDetails = {\n          message: \"Test skipped\",\n        };\n      });\n    }\n  };\n\n  private onTestEnd = (test: Mocha.Test) => {\n    if (!this.currentTest) {\n      return;\n    }\n    if (isIncludedInTestRun(test)) {\n      const defaultSuites = getSuitesOfMochaTest(test);\n      this.runtime.updateTest(this.currentTest, (t) => {\n        ensureSuiteLabels(t, defaultSuites);\n        t.stage = Stage.FINISHED;\n      });\n      this.runtime.stopTest(this.currentTest);\n      this.runtime.writeTest(this.currentTest);\n      this.currentTest = undefined;\n\n      // We're writing the test's dedicated scope in onSuiteEnd instead of here\n      // because there might be afterEach hooks, which are reported after\n      // onTestEnd, not before.\n    }\n  };\n\n  private onHookStart = (hook: Mocha.Hook) => {\n    const [hookCategory, hookScope] = getHookType(hook);\n    const test = hook.ctx?.currentTest;\n    const scopeUuid = hookScope === \"each\" && test ? getTestScope(test) : this.getCurrentSuiteScope();\n    if (!scopeUuid) {\n      return;\n    }\n\n    const name = hook.originalTitle ?? hook.title ?? \"\";\n    if (hookCategory) {\n      this.currentHook = this.runtime.startFixture(scopeUuid, hookCategory, { name });\n    }\n  };\n\n  private onHookEnd = (hook: Mocha.Hook) => {\n    if (!this.currentHook) {\n      return;\n    }\n    this.runtime.updateFixture(this.currentHook, (r) => {\n      const error: Error | undefined = hook.error();\n      if (error) {\n        r.status = getStatusFromError(error);\n        r.statusDetails = {\n          message: error.message,\n          trace: error.stack,\n        };\n      } else {\n        r.status = Status.PASSED;\n      }\n    });\n    this.runtime.stopFixture(this.currentHook);\n    this.currentHook = undefined;\n  };\n\n  private writeTestScopes = (suite: Mocha.Suite) => {\n    suite.tests.forEach((test) => {\n      const testScopeUuid = getTestScope(test);\n      if (testScopeUuid) {\n        this.runtime.writeScope(testScopeUuid);\n      }\n    });\n  };\n\n  private getCurrentSuiteScope = () =>\n    this.scopesStack.length > 0 ? this.scopesStack[this.scopesStack.length - 1] : undefined;\n}\n"],"mappings":"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","ignoreList":[]}