{"version":3,"file":"utils.js","names":["_nodePath","require","_nodeProcess","_nodeUrl","_allureJsCommons","_sdk","_reporter","filename","fileURLToPath","pathToFileURL","__filename","toString","allureMochaDataKey","Symbol","getAllureData","item","data","meta","extractMetadataFromString","title","defaultData","isIncludedInTestRun","fullName","createAllureFullName","labels","displayName","cleanTitle","test","titlePath","join","file","concat","getRelativePath","createTestPlanSelectorIndex","testplan","createTestPlanIndex","e","selector","createTestPlanIdIndex","_e$id","id","keySelector","Set","tests","map","filter","v","createTestPlanIndices","parseTestPlan","fullNameIndex","idIndex","exports","getAllureFullName","getAllureMetaLabels","getAllureId","values","l","name","LabelName","ALLURE_ID","value","length","getAllureDisplayName","getTestScope","scope","setTestScope","getSuitesOfMochaTest","slice","resolveParallelModeSetupFile","dirname","extname","getInitialLabels","LANGUAGE","FRAMEWORK","getHostLabel","getThreadLabel","env","MOCHA_WORKER_ID","getTestCaseId","suiteTitles","md5","JSON","stringify","applyTestPlan","ids","selectors","rootSuite","suiteQueue","s","shift","allureData","allureId","has","pending","push","suites","hookTypeRegexp","getHookType","hook","match","exec"],"sources":["../../src/utils.ts"],"sourcesContent":["import type * as Mocha from \"mocha\";\nimport { dirname, extname, join } from \"node:path\";\nimport { env } from \"node:process\";\nimport { fileURLToPath } from \"node:url\";\nimport type { Label } from \"allure-js-commons\";\nimport { LabelName } from \"allure-js-commons\";\nimport type { TestPlanV1, TestPlanV1Test } from \"allure-js-commons/sdk\";\nimport { extractMetadataFromString } from \"allure-js-commons/sdk\";\nimport { getHostLabel, getRelativePath, getThreadLabel, md5, parseTestPlan } from \"allure-js-commons/sdk/reporter\";\nimport type { AllureMochaTestData, HookCategory, HookScope, HookType, TestPlanIndices } from \"./types.js\";\n\nconst filename = fileURLToPath(import.meta.url);\n\nconst allureMochaDataKey = Symbol(\"Used to access Allure extra data in Mocha objects\");\n\nconst getAllureData = (item: Mocha.Test): AllureMochaTestData => {\n  const data = (item as any)[allureMochaDataKey];\n  if (!data) {\n    const meta = extractMetadataFromString(item.title);\n    const defaultData: AllureMochaTestData = {\n      isIncludedInTestRun: true,\n      fullName: createAllureFullName(item),\n      labels: meta.labels,\n      displayName: meta.cleanTitle,\n    };\n    (item as any)[allureMochaDataKey] = defaultData;\n    return defaultData;\n  }\n  return data;\n};\n\nconst createAllureFullName = (test: Mocha.Test) => {\n  const titlePath = test.titlePath().join(\" > \");\n  return test.file ? `${getRelativePath(test.file)}: ${titlePath}` : titlePath;\n};\n\nconst createTestPlanSelectorIndex = (testplan: TestPlanV1) => createTestPlanIndex((e) => e.selector, testplan);\n\nconst createTestPlanIdIndex = (testplan: TestPlanV1) => createTestPlanIndex((e) => e.id?.toString(), testplan);\n\nconst createTestPlanIndex = <T>(keySelector: (entry: TestPlanV1Test) => T | undefined, testplan: TestPlanV1): Set<T> =>\n  new Set(testplan.tests.map((e) => keySelector(e)).filter((v) => v)) as Set<T>;\n\nexport const createTestPlanIndices = (): TestPlanIndices | undefined => {\n  const testplan = parseTestPlan();\n  if (testplan) {\n    return {\n      fullNameIndex: createTestPlanSelectorIndex(testplan),\n      idIndex: createTestPlanIdIndex(testplan),\n    };\n  }\n};\n\nexport const getAllureFullName = (test: Mocha.Test) => getAllureData(test).fullName;\n\nexport const isIncludedInTestRun = (test: Mocha.Test) => getAllureData(test).isIncludedInTestRun;\n\nexport const getAllureMetaLabels = (test: Mocha.Test) => getAllureData(test).labels;\n\nexport const getAllureId = (data: AllureMochaTestData) => {\n  const values = data.labels.filter((l) => l.name === LabelName.ALLURE_ID).map((l) => l.value);\n  if (values.length) {\n    return values[0];\n  }\n};\n\nexport const getAllureDisplayName = (test: Mocha.Test) => getAllureData(test).displayName;\n\nexport const getTestScope = (test: Mocha.Test) => getAllureData(test).scope;\n\nexport const setTestScope = (test: Mocha.Test, scope: string) => {\n  getAllureData(test).scope = scope;\n};\n\nexport const getSuitesOfMochaTest = (test: Mocha.Test) => test.titlePath().slice(0, -1);\n\nexport const resolveParallelModeSetupFile = () =>\n  join(dirname(filename), `setupAllureMochaParallel${extname(filename)}`);\n\nexport const getInitialLabels = (): Label[] => [\n  { name: LabelName.LANGUAGE, value: \"javascript\" },\n  { name: LabelName.FRAMEWORK, value: \"mocha\" },\n  getHostLabel(),\n  getThreadLabel(env.MOCHA_WORKER_ID),\n];\n\nexport const getTestCaseId = (test: Mocha.Test) => {\n  const suiteTitles = test.titlePath().slice(0, -1);\n  return md5(JSON.stringify([...suiteTitles, getAllureDisplayName(test)]));\n};\n\nexport const applyTestPlan = (ids: ReadonlySet<string>, selectors: ReadonlySet<string>, rootSuite: Mocha.Suite) => {\n  const suiteQueue = [];\n  for (let s: Mocha.Suite | undefined = rootSuite; s; s = suiteQueue.shift()) {\n    for (const test of s.tests) {\n      const allureData = getAllureData(test);\n      const allureId = getAllureId(allureData);\n      if (!selectors.has(allureData.fullName) && (!allureId || !ids.has(allureId))) {\n        allureData.isIncludedInTestRun = false;\n        test.pending = true;\n      }\n    }\n    suiteQueue.push(...s.suites);\n  }\n};\n\nconst hookTypeRegexp = /^\"(before|after) (all|each)\"/;\n\nexport const getHookType = (hook: Mocha.Hook): HookType => {\n  if (hook.title) {\n    const match = hookTypeRegexp.exec(hook.title);\n    if (match) {\n      return [match[1] as HookCategory, match[2] as HookScope];\n    }\n  }\n  return [];\n};\n"],"mappings":"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","ignoreList":[]}